//Stack & Queue
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define MAX 10
typedef struct {
	int elems[MAX];
	int Top;
}STACK;

typedef struct {
	int elems[MAX];
	int front;
	int rear;
}QUEUE;

void initS(STACK* S);
void initQ(QUEUE* Q);
void push(STACK* S,int data);
void enqueue(QUEUE* Q, int data);
void pop(STACK* S);
void dequeue(QUEUE* Q);
int peek(STACK S);
int isRear(QUEUE Q);
bool isEmpty(STACK S);
bool isEmptyy(QUEUE Q);
bool isFull(STACK Q);
bool isFulll(QUEUE Q);
void visualize(STACK S);
void display(QUEUE Q);
int main() {
	STACK plate;
	QUEUE line;
	printf("*******STACK********\n\n");
	initS(&plate);
	initQ(&line);
	push(&plate, 5);
	push(&plate, 7);
	push(&plate, 4);
	push(&plate, 69);
	visualize(plate);
	printf("********QUEUE*******\n");
	enqueue(&line, 65);
	enqueue(&line, 17);
	enqueue(&line, 99);
	enqueue(&line, 800);
	enqueue(&line, 69);
	display(line);
	return 0;
}

void initS(STACK* S) {
	S->Top = -1;
}
void initQ(QUEUE* Q) {
	Q->rear = 0;
	Q->front = 1;
	
}
void push(STACK* S,int data) {
	if(S->Top < MAX) {
		S->Top++;
		S->elems[S->Top] = data;
	}
}
void enqueue(QUEUE* Q, int data) {
	if((Q->rear + 2) % MAX!= Q->front) {
		 Q->rear = (Q->rear + 1) % MAX;
		 Q->elems[Q->rear] = data;
	}
}
void pop(STACK* S) {
	if(S->Top != -1) {
		S->Top--;
	}
}
void dequeue(QUEUE* Q) {
	if((Q->rear + 1) % MAX != Q->front) {
		Q->front = (Q->front+1) & MAX;
	}
}
int peek(STACK S) {
	return S.elems[S.Top];
}
int Rear(QUEUE Q) {
	return(Q.elems[Q.rear]);
}
bool isEmpty(STACK S) {
	return (S.Top == -1) ? true : false;
}
bool isEmptyy(QUEUE Q) {
	return (Q.front == (Q.rear+1) % MAX) ? true : false;
}
bool isFull(STACK S) {
	return (S.Top == MAX-1) ? true : false;
}
bool isFulll(QUEUE Q) {
	return (Q.front > (Q.rear + 2) % MAX) ? true : false;
}

void visualize(STACK S) {
	while(!isEmpty(S)) {
		printf("\t");
		printf("%5d\n",peek(S));
		pop(&S);
	}
	
	printf("Empty\n\n");

}

void display(QUEUE Q) {
	int x;
	if(Q.front != (Q.rear+1) % MAX) {
	for(x = Q.front; x != (Q.rear + 1) % MAX; x = (x+1)%MAX){
		printf("%5d -",Q.elems[x]);
    dequeue(&Q);
		}
		printf(" MACHINE");
	}else {
		printf("NULL");
	}
}
